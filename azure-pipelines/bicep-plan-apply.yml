#parameters:    
#    - name: environments
#      type: object
stages:
#- ${{each environment in parameters.environments}}:  
# Uses SCP - Dev SCP has no approvals ensures CICD and Prod SCP has approvals - members will be Operations.
- stage: Bicep_Plan
  displayName: Bicep_Plan
  jobs:
  # Uses Azure DevOps environments approvals - fwd_tst1, fwd_tst2 etc - approval members will be fwp\contributors
  # For Prod only members of SG-AA-OPS-AzureDevOps-FWD-Deployment-Approvers-FWD can approve.
  - deployment: Bicep_Plan_AzDevOpsEnv
    displayName: Bicep_Plan_AzDevOpsEnv
    environment: 'as_dev'
    pool:
      #vmImage: windows-latest
      name: AS-Windows
      #name: default
    #variables:
    #- group: ${{ environment.variableGroupName }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: DownloadPackage@1
            #condition: and(succeeded(), ne('${{ environment.appVersionToDeploy }}', 'deploy-feature-branch-code'), ne('${{ environment.appVersionToDeploy }}', 'hotfix'))
            inputs:
              packageType: 'nuget' # 'nuget' Options: maven, npm, nuget, pypi, upack
              feed: 'Production/azure-devOps-with-bicep'
              definition: 'Azure.DevOps.With.Bicep'
              version: 'latest'
              downloadPath: '$(System.ArtifactsDirectory)'
          - task: DownloadPackage@1
            inputs:
              packageType: 'nuget' # 'nuget' Options: maven, npm, nuget, pypi, upack
              feed: 'Production/as-bicep-core-module'
              definition: 'AS.Bicep-Core-Modules'
              version: 'latest'
              downloadPath: '$(System.ArtifactsDirectory)/git-modules'
          - task: AzurePowerShell@5
            displayName: Directory Structure
            inputs:
              azureSubscription: 'ASProdServiceConnection'
              ScriptType: 'InlineScript'
              Inline: 'Get-ChildItem $(System.ArtifactsDirectory) -Recurse'
              azurePowerShellVersion: 'latestVersion'
              workingDirectory: '$(Agent.BuildDirectory)'
          - task: AzurePowerShell@5
            #condition: and(succeeded(), ne('${{ environment.appVersionToDeploy }}', 'deploy-feature-branch-code'), ne('${{ environment.appVersionToDeploy }}', 'hotfix'))
            displayName: Bicep-Deployment-Plan-VersionedCode
            inputs:
              azureSubscription: 'ASProdServiceConnection'
              scriptType: filePath
              scriptPath: $(System.ArtifactsDirectory)\content\scripts\Bicep-Deployment-Plan.ps1
              azurePowerShellVersion: latestVersion
              workingDirectory: '$(Agent.BuildDirectory)'
- stage: Bicep_Apply
  # Converto-securestring in scriptarguments like -gpgpassphrase (convertto-securestring $(gpgpassphrase) returns error
  # ##[error]The system cannot protect plain text input. To suppress this warning and convert the plain text to a SecureString, reissue the command specifying the Force parameter. For more information ,type: get-help ConvertTo-SecureString.

  displayName: Bicep_Apply
  jobs:
  # Uses Azure DevOps environments approvals - fwd_tst1, fwd_tst2 etc - approval members will be fwp\contributors   
  # For Prod only members of SG-AA-OPS-AzureDevOps-FWD-Deployment-Approvers-FWD can approve.    
  - deployment: Bicep_Apply_AzDevOpsEnv
    displayName: Bicep_Apply_AzDevOpsEnv
    environment: 'as_dev'
    pool:
      vmImage: windows-latest
    #variables:
    #- group: ${{ environment.variableGroupName }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: DownloadPackage@1
            #condition: and(succeeded(), ne('${{ environment.appVersionToDeploy }}', 'deploy-feature-branch-code'), ne('${{ environment.appVersionToDeploy }}', 'hotfix'))
            inputs:
              packageType: 'nuget' # 'nuget' Options: maven, npm, nuget, pypi, upack
              feed: 'Production/azure-devOps-with-bicep'
              definition: 'Azure.DevOps.With.Bicep'
              version: 'latest'
              downloadPath: '$(System.ArtifactsDirectory)'
          - task: DownloadPackage@1
            inputs:
              packageType: 'nuget' # 'nuget' Options: maven, npm, nuget, pypi, upack
              feed: 'Production/as-bicep-core-module'
              definition: 'AS.Bicep-Core-Modules'
              version: 'latest'
              downloadPath: '$(System.ArtifactsDirectory)/git-modules'
          - task: AzurePowerShell@5
            #condition: and(succeeded(), ne('${{ environment.appVersionToDeploy }}', 'deploy-feature-branch-code'), ne('${{ environment.appVersionToDeploy }}', 'hotfix'))
            displayName: Bicep-Deployment-Apply-VersionedCode
            inputs:
              azureSubscription: 'ASProdServiceConnection'
              scriptType: filePath
              scriptPath: $(System.ArtifactsDirectory)\content\scripts\Bicep-Deployment-Apply.ps1
              azurePowerShellVersion: latestVersion
              workingDirectory: '$(Agent.BuildDirectory)'
          - task: AzurePowerShell@5
            #condition: and(succeeded(), or(eq('${{ environment.appVersionToDeploy }}', 'deploy-feature-branch-code'), eq('${{ environment.appVersionToDeploy }}', 'hotfix')))
            displayName: Bicep-Deployment-Apply-FeatureBranch
            inputs:
              azureSubscription: 'ASProdServiceConnection'
              scriptType: filePath
              scriptPath: $(Build.SourcesDirectory)\scripts\Bicep-Deployment-Apply.ps1
              azurePowerShellVersion: latestVersion
              workingDirectory: '$(Agent.BuildDirectory)'
